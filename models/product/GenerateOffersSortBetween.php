<?php namespace Drabbit\Avito\Models\Product;


use Drabbit\Avito\Controllers\Products;
use Drabbit\Avito\Models\Layout;
use Drabbit\Avito\Models\Offer;
use Drabbit\Avito\Models\Offer\FilterConfig;
use Drabbit\Avito\Models\Product;

class GenerateOffersSortBetween extends GenerateOffers
{
    public $productLayoutList;
    private $collection;
    private $intervalPhased;

    private function addLayoutList()
    {
        $productId = $this->product->id;
        $productLayoutId = $this->layout->id;

        if(is_null($this->productLayoutList)) {
            // получаем дату начала из модели "Шаблоны"
            $this->productLayoutList[$productLayoutId][$productId] = $this->product;
        }
        elseif(!array_key_exists($productLayoutId, $this->productLayoutList)) {
            $this->productLayoutList[$productLayoutId][$productId] = $this->product;
        }
        elseif(!array_key_exists($productId, $this->productLayoutList[$productLayoutId])) {
            $this->productLayoutList[$productLayoutId][$productId] = $this->product;
        }
    }
    private function addProductCollection()
    {
        foreach ($this->productLayoutList as $key => $layout)
        {
            $this->collection[$key] = collect($layout);
        }
    }

    protected function addIntervalInDateTimeOffer()
    {
        $addDateTimeInterval = $this->dateTime->timestamp + $this->intervalPhased[$this->layout->id];
        $addEndAtInterval = $this->endAt->timestamp + $this->intervalPhased[$this->layout->id];

        $this->dateTime->setTimestamp($addDateTimeInterval);
        $this->endAt->setTimestamp($addEndAtInterval);

        $this->validateTimeStampForRelevance();
    }

    public function saveProduct(Product $product)
    {
        $this->product = $product;
        $this->layout = $product->getLayout();
        $this->addLayoutList();
        $this->addProductCollection();
    }

    public function make(Product $product)
    {
        parent::make($product); // TODO: Change the autogenerated stub

        $this->configPhasedInterval();

        return $this;
    }

    public function configPhasedInterval()
    {
        foreach ($this->collection as $layoutId => $products)
        {
            $stamp = $this->layout->end_at_cycle->timestamp - $this->layout->begin_at->timestamp;
            $count = 0;
            foreach ($products as $product){
                $status =  $product->comment; // male, female, unisex

                if($status == 'unisex')
                    $count = count(Products::SIZE_FOOTWEAR['male']) + count(Products::SIZE_FOOTWEAR['female']);

                else $count += count(Products::SIZE_FOOTWEAR[$status]);
            }

            $this->intervalPhased[$layoutId] = $stamp / $count;
        }
    }

}